if(length(i) == 1) {
collection = msigdb_env$all_collections[[version]][i]
} else {
message(paste0("Cannot find collection '", collection, "', please select a valid value."))
collection = choose_msigdb_collection(version, gene_id_type)
}
}
url = paste0(msigdb_base_url, "/", version, "/", collection, ".v", version, ".", gene_id_type, ".gmt")
basename = basename(url)
if(is.null(msigdb_env$file_contents[[basename]])) {
ln = readLines(url(url))
msigdb_env$file_contents[[basename]] = ln
} else {
ln = msigdb_env$file_contents[[basename]]
}
ln = strsplit(ln, "\t")
gs = lapply(ln, function(x) x[-(1:2)])
names(gs) = sapply(ln, function(x) x[1])
if(as_table) {
data.frame(gene_set = rep(names(gs), times = sapply(gs, length)),
gene = unlist(gs))
} else {
gs
}
}
lt = get_msigdb(version = "2023.1.Hs", collection = "h.all", as_table = T)
lt
get_msigdb = function(version = choose_msigdb_version(),
collection = choose_msigdb_collection(version, gene_id_type),
gene_id_type = c("entrez", "symbols"), as_table = FALSE) {
version = force(version)
gene_id_type = match.arg(gene_id_type)
if(!version %in% msigdb_env$all_versions) {
i = grep(version, msigdb_env$all_versions, ignore.case = TRUE)
if(length(i) == 1) {
version = msigdb_env$all_versions[i]
} else {
message(paste0("Cannot find version '", version, "', please select a valid value."))
version = choose_msigdb_version()
}
}
collection = force(collection)
if(!collection %in% msigdb_env$all_collections[[version]]) {
i = grep(collection, msigdb_env$all_collections[[version]], ignore.case = TRUE)
if(length(i) == 1) {
collection = msigdb_env$all_collections[[version]][i]
} else {
message(paste0("Cannot find collection '", collection, "', please select a valid value."))
collection = choose_msigdb_collection(version, gene_id_type)
}
}
url = paste0(msigdb_base_url, "/", version, "/", collection, ".v", version, ".", gene_id_type, ".gmt")
basename = basename(url)
if(is.null(msigdb_env$file_contents[[basename]])) {
ln = readLines(url(url))
msigdb_env$file_contents[[basename]] = ln
} else {
ln = msigdb_env$file_contents[[basename]]
}
ln = strsplit(ln, "\t")
gs = lapply(ln, function(x) x[-(1:2)])
names(gs) = sapply(ln, function(x) x[1])
if(as_table) {
df = data.frame(gene_set = rep(names(gs), times = sapply(gs, length)),
gene = unlist(gs))
rownames(df) = NULL
df
} else {
gs
}
}
lt = get_msigdb(version = "2023.1.Hs", collection = "h.all", as_table = T)
lt
msigdb_base_url = "https://data.broadinstitute.org/gsea-msigdb/msigdb/release/"
msigdb_env = new.env(parent = emptyenv())
msigdb_env$all_versions = NULL
msigdb_env$file_list = list()
msigdb_env$all_collections = list()
msigdb_env$file_contents = list()
choose_msigdb_version = function() {
if(is.null(msigdb_env$all_versions)) {
all_versions = get_file_list(msigdb_base_url)
msigdb_env$all_versions = all_versions
} else {
all_versions = msigdb_env$all_versions
}
ind = menu(all_versions, title = "Choose an MSigDB version:")
all_versions[ind]
}
choose_msigdb_collection = function(version, gene_id_type) {
if(is.null(msigdb_env$file_list[[version]])) {
files = get_file_list(paste0(msigdb_base_url, "/", version))
files = files[grep("\\.gmt$", files)]
files = files[!grepl("^msigdb", files)]
msigdb_env$file_list[[version]] = files
} else {
files = msigdb_env$file_list[[version]]
}
files = files[grep(gene_id_type, files)]
collections = gsub(paste0(".v", version, ".*$"), "", files)
msigdb_env$all_collections[[version]] = collections
ind = menu(collections, title = paste0("Choose a gene set collection for version ", version, ":"))
collections[ind]
}
get_file_list = function(url) {
con = url(url)
on.exit(close(con))
ln = readLines(con)
ind = grep("^<tr><td", ln)
rows = ln[ind]
rows = gsub("</td><td[^>]*>", ";", rows)
rows = gsub("<.*?>", "", rows)
files = sapply(strsplit(rows, ";"), function(x) x[2])[-1]
gsub("/", "", files)
}
get_msigdb = function(version = choose_msigdb_version(),
collection = choose_msigdb_collection(version, gene_id_type),
gene_id_type = c("entrez", "symbols"), as_table = FALSE) {
version = force(version)
gene_id_type = match.arg(gene_id_type)
if(!version %in% msigdb_env$all_versions) {
i = grep(version, msigdb_env$all_versions, ignore.case = TRUE)
if(length(i) == 1) {
version = msigdb_env$all_versions[i]
} else {
message(paste0("Cannot find version '", version, "', please select a valid value."))
version = choose_msigdb_version()
}
}
collection = force(collection)
if(!collection %in% msigdb_env$all_collections[[version]]) {
i = grep(collection, msigdb_env$all_collections[[version]], ignore.case = TRUE)
if(length(i) == 1) {
collection = msigdb_env$all_collections[[version]][i]
} else {
message(paste0("Cannot find collection '", collection, "', please select a valid value."))
collection = choose_msigdb_collection(version, gene_id_type)
}
}
url = paste0(msigdb_base_url, "/", version, "/", collection, ".v", version, ".", gene_id_type, ".gmt")
basename = basename(url)
if(is.null(msigdb_env$file_contents[[basename]])) {
con = url(url)
on.exit(close(con))
ln = readLines(con)
msigdb_env$file_contents[[basename]] = ln
} else {
ln = msigdb_env$file_contents[[basename]]
}
ln = strsplit(ln, "\t")
gs = lapply(ln, function(x) x[-(1:2)])
names(gs) = sapply(ln, function(x) x[1])
if(as_table) {
df = data.frame(gene_set = rep(names(gs), times = sapply(gs, length)),
gene = unlist(gs))
rownames(df) = NULL
df
} else {
gs
}
}
lt = get_msigdb()
lt
lt = get_msigdb(version = "2023.1.Hs", collection = "h.all", as_table = T)
get_msigdb = function(version = choose_msigdb_version(),
collection = choose_msigdb_collection(version),
gene_id_type = c("entrez", "symbols"), as_table = FALSE) {
version = force(version)
gene_id_type = match.arg(gene_id_type)
if(is.null(msigdb_env$all_versions)) {
list_msigdb_versions()
}
if(!version %in% msigdb_env$all_versions) {
i = grep(version, msigdb_env$all_versions, ignore.case = TRUE)
if(length(i) == 1) {
version = msigdb_env$all_versions[i]
} else {
message(paste0("Cannot find version '", version, "', please select a valid value."))
version = choose_msigdb_version()
}
}
collection = force(collection)
if(is.null(msigdb_env$all_collections[[version]])) {
list_msigdb_collections(version)
}
if(!collection %in% msigdb_env$all_collections[[version]]) {
i = grep(collection, msigdb_env$all_collections[[version]], ignore.case = TRUE)
if(length(i) == 1) {
collection = msigdb_env$all_collections[[version]][i]
} else {
message(paste0("Cannot find collection '", collection, "', please select a valid value."))
collection = choose_msigdb_collection(version)
}
}
url = paste0(msigdb_base_url, "/", version, "/", collection, ".v", version, ".", gene_id_type, ".gmt")
basename = basename(url)
if(is.null(msigdb_env$file_contents[[basename]])) {
con = url(url)
on.exit(close(con))
ln = readLines(con)
msigdb_env$file_contents[[basename]] = ln
} else {
ln = msigdb_env$file_contents[[basename]]
}
ln = strsplit(ln, "\t")
gs = lapply(ln, function(x) x[-(1:2)])
names(gs) = sapply(ln, function(x) x[1])
if(as_table) {
df = data.frame(gene_set = rep(names(gs), times = sapply(gs, length)),
gene = unlist(gs))
rownames(df) = NULL
df
} else {
gs
}
}
get_msigdb()
traceback()
msigdb_base_url = "https://data.broadinstitute.org/gsea-msigdb/msigdb/release/"
msigdb_env = new.env(parent = emptyenv())
msigdb_env$all_versions = NULL
msigdb_env$file_list = list()
msigdb_env$all_collections = list()
msigdb_env$file_contents = list()
list_msigdb_versions = function() {
if(is.null(msigdb_env$all_versions)) {
all_versions = get_file_list(msigdb_base_url)
msigdb_env$all_versions = all_versions
} else {
all_versions = msigdb_env$all_versions
}
all_versions
}
choose_msigdb_version = function() {
all_versions = list_msigdb_versions()
ind = menu(all_versions, title = "Choose an MSigDB version:")
all_versions[ind]
}
list_msigdb_collections = function(version = NULL) {
if(is.null(version)) {
version = choose_msigdb_version()
}
if(is.null(msigdb_env$file_list[[version]])) {
files = get_file_list(paste0(msigdb_base_url, "/", version))
files = files[grep("\\.gmt$", files)]
files = files[!grepl("^msigdb", files)]
msigdb_env$file_list[[version]] = files
} else {
files = msigdb_env$file_list[[version]]
}
collections = unique(gsub(paste0(".v", version, ".*$"), "", files))
msigdb_env$all_collections[[version]] = collections
collections
}
choose_msigdb_collection = function(version) {
collections = list_msigdb_collections(version)
ind = menu(collections, title = paste0("Choose a gene set collection for version ", version, ":"))
collections[ind]
}
get_file_list = function(url) {
con = url(url)
on.exit(close(con))
ln = readLines(con)
ind = grep("^<tr><td", ln)
rows = ln[ind]
rows = gsub("</td><td[^>]*>", ";", rows)
rows = gsub("<.*?>", "", rows)
files = sapply(strsplit(rows, ";"), function(x) x[2])[-1]
gsub("/", "", files)
}
get_msigdb = function(version = choose_msigdb_version(),
collection = choose_msigdb_collection(version),
gene_id_type = c("entrez", "symbols"), as_table = FALSE) {
version = force(version)
gene_id_type = match.arg(gene_id_type)
if(is.null(msigdb_env$all_versions)) {
list_msigdb_versions()
}
if(!version %in% msigdb_env$all_versions) {
i = grep(version, msigdb_env$all_versions, ignore.case = TRUE)
if(length(i) == 1) {
version = msigdb_env$all_versions[i]
} else {
message(paste0("Cannot find version '", version, "', please select a valid value."))
version = choose_msigdb_version()
}
}
collection = force(collection)
if(is.null(msigdb_env$all_collections[[version]])) {
list_msigdb_collections(version)
}
if(!collection %in% msigdb_env$all_collections[[version]]) {
i = grep(collection, msigdb_env$all_collections[[version]], ignore.case = TRUE)
if(length(i) == 1) {
collection = msigdb_env$all_collections[[version]][i]
} else {
message(paste0("Cannot find collection '", collection, "', please select a valid value."))
collection = choose_msigdb_collection(version)
}
}
url = paste0(msigdb_base_url, "/", version, "/", collection, ".v", version, ".", gene_id_type, ".gmt")
basename = basename(url)
if(is.null(msigdb_env$file_contents[[basename]])) {
con = url(url)
on.exit(close(con))
ln = readLines(con)
msigdb_env$file_contents[[basename]] = ln
} else {
ln = msigdb_env$file_contents[[basename]]
}
ln = strsplit(ln, "\t")
gs = lapply(ln, function(x) x[-(1:2)])
names(gs) = sapply(ln, function(x) x[1])
if(as_table) {
df = data.frame(gene_set = rep(names(gs), times = sapply(gs, length)),
gene = unlist(gs))
rownames(df) = NULL
df
} else {
gs
}
}
get_msigdb()
msigdb_env$all_versions
get_msigdb(version = )
get_msigdb(version = "2023.1.Hs", gene_id_type = "c1.all")
get_msigdb(version = "2023.1.Hs", collection =  = "c1.all")
get_msigdb(version = "2023.1.Hs", collection = "c1.all")
list_msigdb_versions()
list_msigdb_collections()
list_msigdb_collections()
list_msigdb_collections()
get_msigdb(version = "2023.1.Hs", collection = "c1.all", as_table = T)
list_msigdb_versions()
list_msigdb_versions("2023.1.Hs")
list_msigdb_collections("2023.1.Hs")
list_msigdb_collections("2023.1.Mm")
get_msigdb(version = "2023.1.Hs", collection = "c2.all", as_table = T)
get_msigdb(version = "2023.1.Hs", collection = "c2.all", as_table = T)
get_msigdb(version = "2023.1.Hs", collection = "c2.all", as_table = T)
list_msigdb_collections()
ah
display(ah)
library(AnnotationHub)
ah = AnnotationHub()
ah$rdataclass = "OrgDb"
ah
ah = ah[ah$rdataclass == "OrgDb"]
ah
ah$title
str(ah)
ah
mcols(ah)
query(ah, "dolphin")
query(ah, "panda")
query(ah, "Tursiops truncatus")
orgdb = ah[["AH108106"]]
orgdb
orgdb
columns(orgdb)
keys(orgdb, kty)
keys(orgdb, keytype = "GO")
columns(orgdb)
all_GO_ids = select(orgdb, keys(orgdb, keytype = "GO"),
c("GO", "ONTOLOGY"), keytype = "GO")
head(all_GO_ids)
dim(all_GO_ids)
all_GO_ids = all_GO_ids[all_GO_ids$ONTOLOGY == "BP", ]
go_id = sample(all_GO_ids, 500)
table(all_GO_ids$ONTOLOGY)
library(simplifyEnrichment)
go_id = sample(all_GO_ids$GO, 500)
mat = GO_similarity(go_id, ont = orgdb)
traceback()
mat = GO_similarity(go_id, db = orgdb)
traceback()
mat = GO_similarity(go_id, db = orgdb, ont = "BP")
simplifyGO(mat)
ah = AnnotationHub()
ah
ah
ah = ah[ah$rdataclass == "OrgDb"]
ah
meta = mcols(ah)
which(meta$species == "Bos taurus")
mcols(ah)$description
meeta
meta
query(ah, "Tursiops truncatus")
ah
display(ah)
ah = AnnotationHub()
display(ah)
ah[["AH74636"]]
ah[["AH74636"]] -> txdb
txdb
seqinfo(txdb)
genes(txdb)
g= genes(txdb)
g
c("+", "-") %in% seqnames(g)
library(BioMartGOGeneSets)
supportedOrganisms()
getGenesFromBioMart("human")
BioMartGOGeneSets::getBioMartGenes("human")
unzip
setwd("~/workspace/dataMASTER_report/")
## if you have some packages missing, use the following command
# setRepositories(ind = 1:4)
# install.packages(c("MultiAssayExperiment", "RaggedExperiment", "org.Hs.eg.db", "shiny", "shinydashboard",
# 	"GetoptLong", "DT", "devtools" "igvShiny", "gtrellis", "ComplexHeatmap", "InteractiveComplexHeatmap", "circlize"))
# devtools::install_github("paul-shannon/igvShiny")
#
setRepositories(ind = 1:4)
for(pkg in c("MultiAssayExperiment", "RaggedExperiment", "org.Hs.eg.db", "shiny", "shinydashboard",
"GetoptLong", "DT", "devtools", "gtrellis", "ComplexHeatmap", "InteractiveComplexHeatmap",
"circlize", "latex2exp")) {
if(!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg)
}
}
if(!require(igvShiny)) {
devtools::install_github("paul-shannon/igvShiny")
}
library(igvShiny)
library(MultiAssayExperiment)
library(RaggedExperiment)
library(org.Hs.eg.db)
library(GetoptLong)
library(DT)
library(igvShiny)
library(gtrellis)
library(ComplexHeatmap)
library(InteractiveComplexHeatmap)
library(circlize)
library(latex2exp)
library(RColorBrewer)
library(jsonlite)
library(cola)
library(shiny)
library(shinydashboard)
library(dashboardthemes)
load("dataMASTER.RData")
load("gencode19_gns_lite.RData")
GENCODE = gencode19_gns_lite
source("src/config.R")
source("src/utils.R")
DB = dataMASTER
META = colData(DB)
EXPERIMENTS = experiments(DB)
EXPERIMENT_NAME = names(EXPERIMENTS)
EXPERIMENTS = lapply(EXPERIMENTS, function(obj) {
if(inherits(obj, c("RangedSummarizedExperiment", "RaggedExperiment"))) {
obj[as.vector(seqnames(rowRanges(obj)) %in% CHROMOSOME)]
} else {
obj
}
})
CD_LIST = lapply(EXPERIMENT_NAME, function(x) colData(DB[, , x]))
names(CD_LIST) = EXPERIMENT_NAME
CNV_NORMALIZED = readRDS("normalized_CNV.rds")
CNV_GERMLINE_NORMALIZED = readRDS("normalized_CNV_germline.rds")
COMPONENT = list()
foo = function() {
for(f in list.files(path = "src", pattern = "comp_", full.name = TRUE)) {
source(f)
}
ui = dashboardPage(
dashboardHeader(title = "dataMASTER browser"),
dashboardSidebar(
sidebarMenu(
id = "sidebar_menu",
menuItem("Overview", tabName = "overview"),
menuItem("Experiments", startExpanded = TRUE,
.list = lapply(EXPERIMENT_NAME, function(e) {
menuSubItem(e, tabName = e)
})
),
menuItem("Query regions", tabName = "region"),
menuItem("Patient", tabName = "patient"),
menuItem("Cohort", tabName = "cohort")
)
),
dashboardBody(
includeCSS("www/master.css"),
includeScript("www/master.js"),
shinyDashboardThemes(
theme = "onenote"
),
tabItems(
.list = lapply(names(COMPONENT), function(e) {
tabItem(tabName = e,
COMPONENT[[e]]$ui
)
})
),
style = "min-width:",
tags$script(HTML('
$("#sidebarItemExpanded").append("<hr><p style=\'color:black;padding:4px 15px;\'>Developed by <a style=\'color:#3c8dbc;\' href=\'https://github.com/jokergoo/\' target=\'_blank\'>Zuguang Gu</a>. Source code is available at <a style=\'color:#3c8dbc;\' href=\'https://github.com/CO-DKFZ/dataMASTER_browser\' target=\'_blank\'>GitHub</a>.</p>");
'))
),
tags$head(tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-3-typeahead/4.0.2/bootstrap3-typeahead.min.js"))
)
server = function(input, output, session) {
lapply(names(COMPONENT), function(e) {
COMPONENT[[e]]$server(input, output, session)
})
}
print(shinyApp(ui, server))
}
foo()
